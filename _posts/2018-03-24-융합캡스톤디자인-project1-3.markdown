---
layout: post
title:  "융합 캡스톤 디자인 - 첫 번째 프로젝트-3"
date:   2018-03-24 00:00:00
author: 임운택
categories: 융합캡스톤디자인
tags:	융합캡스톤디자인 채팅프로그램 암호화
cover:  "/assets/instacode.png"
---

### 한 것들

웹서버(Reverse proxy) 적용, 패킷 감청 방지를 위해 TLS 프로토콜 적용, 비밀 채팅 기능 추가

### 기존 채팅의 문제점

우리 채팅의 컨셉은 저번에 설명 했듯이 **'다 같이 모여서 하는 채팅이지만 선택한 사람에게만 제대로 보이는 채팅'** 이었다. 그 컨셉을 구현하는 건 논리를 만들고 그대로 구현하면 될 일이었다. 클라이언트의 닉네임이나 다른 정보들은 세션을 이용 하므로 서버에 저장될 것이기 때문에 문제가 없을 것이라고 생각했다. 그러나 못된 해커가 클라이언트를 공격해 중간에 패킷을 가로챈다면 비밀 채팅이 무용지물이 될 것이 분명했다. 그 생각이 미치자 나는 그러한 공격을 방지하기 위하여 최근에 이리저리 살펴보던 TLS(https) 프로토콜을 붙여보자고 팀원들에게 제시하였다.

### 채팅 보안 전략

#### 웹서버(Reverse proxy) 사용

nginx 웹서버를 reverse proxy로 앞 단에 두어 들어오는 요청을 처리한다. 그 이유는 서비스를 하는 서버를 뒤에 숨겨 비정상적인 접근이나 공격을 웹서버로 막기 위함이다. 사실 DB도 없고 채팅기능만 있는 서버만 하나 돌아가는데 방어할게 있나 싶다. 서비스 서버와 DB가 여럿 돌아가고 있을 때 웹서버에 접근하는 포트만 열어도 되기에 보안에 유리하고 로드밸런싱 기능도 있어서 일단 사용하면 좋은 것 같다. 정적 파일(html, js, css, image, mp4 등)을 클라이언트에게 serve하기에 편리하고 비교적 빠르다(사실 그것에 특화됨).

#### TLS(HTTPS) 적용

아무리 다양하고 자질구레한 보안 기법을 사용해 공격을 막는다고 해도 중요한 정보를 담은 패킷이 랜선을 타고 서버-클라이언트간 움직인다. 중간에 가로채면 말짱 도루묵이다. 그 것을 어느정도 방어하기 위한 수단이 TLS 프로토콜이다. 쉽게 말하면 TCP 패킷을 암호화 하고, 중간에 인증기관(CA)을 보증인으로 두고, 두 컴퓨터끼리만 이해하는 방식으로 통신한다. 덕분에 중간에 패킷을 가로채기 위한 노력을 헛수고로 만들 수 있다. 이 프로토콜을 적용하면 우리가 만든 채팅의 내용을 당사자를 제외하고 아무도 모르게 만들 수 있지 않을까 생각했다.

![image](/assets/ben1-packet1.png)
_요청과 응답을 암호화 하지 않으면 이런 식으로 패킷 내용을 그대로 볼 수 있게 된다._

이 훌륭한 방식을 내 서버에 적용 하려면 해야할 것이 몇 가지 있다. 서버에서 사용할 인증서와, 서버와 클라이언트를 중간에서 보증해줄 인증기관의 인증서가 필요하다. 일단 서버 도메인이 필요하고 인증기관에서 발급을 받아야 한다. 이번엔 openssl을 사용해 self signed certification 즉 자기 서명을 사용한다. 내가 인증기관이 되는 것이다. 이렇게 하면 브라우저에서 접속할 때 위험한 사이트라면서 빼애액 거린다. 무시하고 접속하면 된다.

![image](/assets/ben1-browser1.png)
_`고급`을 누르면 접속할 수 있는 옵션이 나온다. (firefox를 이용 하였음)_

TLS를 본격적으로 적용하기 위해 몇가지 코드를 수정했다.

{% highlight javascript %}
import https from 'https';
import fs from 'fs';

//const server = http.createServer(app)
const secureServer = https.createServer({
  key: fs.readFileSync('privkey.pem'),
  cert: fs.readFileSync('cert.pem')
}, app)

const sessionMiddleware = session({
  store: store,
  secret: 'vmwoewdsdscWEd37ffsd',
  resave: false,
  saveUninitialized: true,
  cookie: {
    httpOnly: true,
    secure: true // secure 옵션 추가
  }
})

app.use(sessionMiddleware)

secureServer.listen(3000)
{% endhighlight %}
_이 코드만 있으면 되는 건 아니다. 핵심만 추려낸 것이다._

이 간단한 코드를 위해 3일을 삽질했다. 바꿀 것도 몇개 없는데 바꾸고 나니  HTTP 요청시와 웹소켓 연결시 세션 아이디가 일치하지 않는 불상사가 일어나서 이 문제를 해결하기 위해 노력했지만 헛수고였다. 대체 왜 이런일이 일어났을까 고민하며 애꿎은 코드만 만지작 거리다가 wireshark로 패킷을 캡쳐해보니 https로 서버를 설정해도 웹소켓은 여전히 http로 통신하고 있는 것이었고 그 때문에 세션의 불일치가 생긴듯 했다. 나는 곧바로 웹소켓도 https로 연결하고 문제를 해결했다. 여담이지만 여러 브라우저(크롬, 파이어폭스, 사파리)로 테스트 하던 중에 `input submit` 버튼을 눌러 `POST` 요청을 보내면 `CANNOT POST /` 라는 메시지가 나와서 알아보니 클라이언트에서 ajax 사용을 위해 `event.preventDefault()`로 페이지 이동을 막아 놨는데 크롬과 사파리는 `event` 객체가 전역 객체라 클릭이벤트 인자로 받지 않아도 적용이 가능 했지만 파이어폭스는 그렇지 않기 때문에 에러가 뜨는 것이었다.

### 비밀 채팅 구현

비밀 채팅을 위해서 몇 가지 준비를 마쳤다. 그리고 이제 본격적인 기능들을 구현할 차례이다. 저번 포스트에 게시한 것 같지만 채팅 시스템 진행 과정을 다시 되짚어 보았다.

1. 사용자 접속(채팅을 볼 수만 있음)
2. 사용자 닉네임 설정(이제 채팅이 가능함)
3. 닉네임은 변경 가능(중복은 안됨)
4. 채팅 메시지 전송 시 페이지 접속자 전부에게 broadcast(의미없는 글로 보임)
5. 내가 말하고 싶은 상대방을 toggle 후 채팅을 보내면 그 상대방에겐 제대로 된 글이 보임

이게 전부다. 사용자 접속여부는 세션을 부여하면 될 것이고, 닉네임 설정과 닉네임 변경은 세션 스토어에 잘 저장해 사용하면 될 것이다. 채팅 메시지 전송은 `socket.io` 의 도움을 받아 쉽게 구현할 수 있을 것이다. 문제는 내가 선택한 상대방에게만 제대로 된 글이 보이는 기능인데, 지금 와서 생각해보면 별 것 아니지만 효율적으로 구현하고 싶어서 시간을 많이 할애했다(강제적으로).

{% highlight javascript %}
socket.on('secret', name => {
    store.get(sessionID, (err, sess) => {
      if (sess.username === name) {
        console.log('overlaped')
      } else {
        const secret = new Set(sess.secret)
        
        store.all((err, sessions) => {
          sessions.map(sdata => {
            if (sdata && sdata.username === name) {
              secret.add({ username: name, sid: sdata.id, io: sdata.io })
              sess.secret = secret
              store.set(sessionID, sess, err => {
                io.to(sessionID).emit('secret', name)
                console.log(sess)
              })
            }
          })
        })
      }
    })
  })
  socket.on('secretRemove', name => {
    store.get(sessionID, (err, sess) => {
      console.log(sess)
      const secret = new Set(sess.secret)
      secret.delete(name)
      secret.clear()
      sess.secret = secret
      console.log(sess)
      store.set(sessionID, sess, err => {
        io.to(sessionID).emit('secretRemove', name)
      })
    })
  })
{% endhighlight %}

채팅 참여자가 toggle로 선택한 사람의 정보를 기억하는 부분이다. toggle on 이 되면 secret 이 되고 toggle off 가 되면 secretRemove가 된다. Set 자료형으로 저장 하면 중복체크도 자동으로 될 것이라고 생각해서 사용했는데 session store 에서 Set 자료형을 못 받아들이는 문제가 있어서 애를 먹었다.


{% highlight javascript %}
socket.on('chat', message => {
  console.log(message)
  store.get(sessionID, (err, sess) => {
    if (sess && sess.active) {
      const secret = new Set(sess.secret)
      const time = Date.now()
      store.all((err, sessions) => {
        sessions
          .filter(sdata => {
            if (!sdata.active) {
              chat.connected[sdata.io].emit(
                'cypher',
                sess.username,
                'tomb',
                time
              ) 
              return false // meaningless
            } else {
              return true // participants
            }
          })
          .map(sdata => {
            if (_.some(Array.from(secret), { username: sdata.username })) {
              chat.connected[sdata.io].emit(
                'plain',
                sess.username,
                message,
                time
              ) // plain text
            } else if (sessionID === sdata.id) {
              chat.connected[sdata.io].emit(
                'plain',
                sess.username,
                message,
                time
              ) // plain text
            } else {
              chat.connected[sdata.io].emit(
                'cypher',
                sess.username,
                'garbage',
                time
              ) // meaningless
            }
          })
      })
    }
  })
})
{% endhighlight %}

가장 고심했던 부분인데 채팅 시 planetext 와 cyphertext 를 걸러서 보내주는 부분이다. 접속자 전부를 filter 로 단순 접속자를 걸러내서 cyphertext 를 보내고, 나머지 사람들을 toggle 여부에 따라서 걸러내 전송한다. 중간에 `Lodash` 라이브러리를 사용해서 쉽게 처리한 부분도 있다. 정말 편한 라이브러리인 것 같다.

이 코드가 문제가 좀 있는데 유저가 재접속 시 websocket 세션이 초기화 되어서 비밀 채팅이 먹히지 않는 문제가 있는데 해결하지 않고 넘어가려고 한다. 이번 프로젝트는 팀원이 모두 참여해 맛을 보는 느낌으로 끝내고, 다음 프로젝트부터는 더 완성도 있는 결과물을 만들어볼 것이다.

### 최종 결과물

![](/assets/ben1-result1.png)
![](/assets/ben1-result2.png)